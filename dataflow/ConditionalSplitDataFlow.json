{
	"name": "ConditionalSplitDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmpDatadataset101",
						"type": "DatasetReference"
					},
					"name": "Allemployees"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputDataset",
						"type": "DatasetReference"
					},
					"name": "ITEmployeesink"
				},
				{
					"dataset": {
						"referenceName": "OutputDataset",
						"type": "DatasetReference"
					},
					"name": "HREmployeeSink"
				},
				{
					"dataset": {
						"referenceName": "OutputDataset",
						"type": "DatasetReference"
					},
					"name": "PayRollEmployeeSink"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Empid as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Allemployees",
				"Allemployees split(equals(Department, '1'),",
				"     equals(Department, '2'),",
				"     equals(Department,'3'),",
				"     disjoint: false) ~> split1@(ITEmpoyees, HREmployees, PayrollEmployees)",
				"split1@ITEmpoyees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['SplitITEmployee.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ITEmployeesink",
				"split1@HREmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['SplitHREmployee'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> HREmployeeSink",
				"split1@PayrollEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['SplitPayrollEmployee.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> PayRollEmployeeSink"
			]
		}
	}
}